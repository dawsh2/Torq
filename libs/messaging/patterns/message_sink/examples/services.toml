# Example services.toml for SINK-003 SinkFactory Configuration
#
# This file demonstrates the complete configuration format for creating MessageSinks
# using the SinkFactory pattern. The configuration supports three sink types:
# - relay: Unix socket connections to local relay services
# - direct: TCP, WebSocket, and Unix socket direct connections
# - composite: Multi-target patterns (fanout, round-robin, failover)

# ==============================================================================
# RELAY SINKS - Unix socket connections to relay services
# ==============================================================================

[services.market_data_relay]
type = "relay"
endpoint = "/tmp/torq/market_data_relay.sock"
buffer_size = 10000

[services.signal_relay]  
type = "relay"
endpoint = "/tmp/torq/signal_relay.sock"
buffer_size = 15000

[services.execution_relay]
type = "relay" 
endpoint = "/tmp/torq/execution_relay.sock"
buffer_size = 20000

# ==============================================================================
# DIRECT SINKS - TCP, WebSocket, and Unix socket direct connections
# ==============================================================================

# TCP connection to remote trading service
[services.trading_gateway]
type = "direct"
endpoint = "tcp://trading-gateway.internal:8080"

# WebSocket connection to market data feed
[services.websocket_feed]
type = "direct"
endpoint = "ws://market-data.exchange.com:443"

# Unix socket direct connection (alternative to relay)
[services.local_strategy]
type = "direct"
endpoint = "unix:///tmp/torq/strategy_engine.sock"

# ==============================================================================
# COMPOSITE SINKS - Multi-target distribution patterns
# ==============================================================================

# Fanout pattern - send to all targets simultaneously
[services.broadcast_signals]
type = "composite"
pattern = "fanout"
targets = ["signal_relay", "trading_gateway", "websocket_feed"]

# Round-robin pattern - distribute messages across targets
[services.load_balanced_execution]
type = "composite"
pattern = "round_robin"
targets = ["execution_relay", "trading_gateway"]

# Failover pattern - primary with fallback targets
[services.reliable_market_data]
type = "composite"
pattern = "failover"
targets = ["market_data_relay", "websocket_feed", "local_strategy"]

# ==============================================================================
# LAZY CONFIGURATION - For services requiring connection resilience
# ==============================================================================

# Relay with lazy configuration for high availability
[services.ha_signal_relay]
type = "relay"
endpoint = "/tmp/torq/ha_signal_relay.sock"
buffer_size = 25000

[services.ha_signal_relay.lazy]
max_retries = 5
retry_delay_ms = 1000
backoff_multiplier = 2.0
max_retry_delay_secs = 60
auto_reconnect = true
connect_timeout_secs = 10
wait_timeout_secs = 30

# Direct TCP connection with conservative lazy settings
[services.external_exchange]
type = "direct"
endpoint = "tcp://external.exchange.com:443"

[services.external_exchange.lazy]
max_retries = 10
retry_delay_ms = 2000
backoff_multiplier = 1.5
max_retry_delay_secs = 120
auto_reconnect = true
connect_timeout_secs = 15
wait_timeout_secs = 45

# WebSocket with fast recovery lazy settings
[services.realtime_feed]
type = "direct"
endpoint = "wss://realtime-feed.exchange.com:443"

[services.realtime_feed.lazy]
max_retries = 3
retry_delay_ms = 500
backoff_multiplier = 1.8
max_retry_delay_secs = 30
auto_reconnect = true
connect_timeout_secs = 5
wait_timeout_secs = 15

# Composite with lazy configuration for critical services
[services.critical_broadcast]
type = "composite"
pattern = "fanout"
targets = ["ha_signal_relay", "external_exchange", "realtime_feed"]

[services.critical_broadcast.lazy]
max_retries = 7
retry_delay_ms = 750
backoff_multiplier = 2.5
max_retry_delay_secs = 90
auto_reconnect = true
connect_timeout_secs = 8
wait_timeout_secs = 25

# ==============================================================================
# EXAMPLE USAGE PATTERNS
# ==============================================================================

# Pattern 1: Trading pipeline with fanout for logging and monitoring
[services.trading_pipeline]
type = "composite" 
pattern = "fanout"
targets = ["execution_relay", "trading_gateway"]

# Pattern 2: Market data aggregation with failover redundancy
[services.market_data_aggregator]
type = "composite"
pattern = "failover"
targets = ["market_data_relay", "websocket_feed", "realtime_feed"]

# Pattern 3: Load-balanced order routing
[services.order_router]
type = "composite"
pattern = "round_robin"
targets = ["trading_gateway", "external_exchange"]

# Pattern 4: High-frequency strategy with local relay
[services.hft_strategy]
type = "relay"
endpoint = "/tmp/torq/hft_strategy.sock"
buffer_size = 50000

# Pattern 5: Risk management broadcast to all systems
[services.risk_broadcast]
type = "composite"
pattern = "fanout" 
targets = ["signal_relay", "execution_relay", "trading_gateway", "ha_signal_relay"]

# ==============================================================================
# CONFIGURATION NOTES
# ==============================================================================
#
# Sink Types:
# - "relay": Unix socket to local relay service (high performance, low latency)
# - "direct": Direct connection (TCP/WebSocket/Unix) to target service
# - "composite": Multi-target distribution with patterns
#
# Composite Patterns:
# - "fanout": Send message to ALL targets simultaneously
# - "round_robin": Rotate messages between targets for load balancing  
# - "failover": Try targets in order until one succeeds
#
# Lazy Configuration (optional):
# - max_retries: Maximum connection attempts before giving up
# - retry_delay_ms: Initial delay between retry attempts (milliseconds)
# - backoff_multiplier: Exponential backoff factor (e.g., 2.0 = double delay each retry)
# - max_retry_delay_secs: Maximum delay cap between retries (seconds)
# - auto_reconnect: Whether to automatically reconnect on connection loss
# - connect_timeout_secs: Timeout per connection attempt (seconds)
# - wait_timeout_secs: Timeout waiting for other threads' connections (seconds)
#
# Buffer Sizes (relay only):
# - buffer_size: Number of messages to buffer before blocking (default: 10000)
#
# Endpoint Formats:
# - Relay: "/path/to/socket.sock"
# - TCP: "tcp://host:port"
# - WebSocket: "ws://host:port" or "wss://host:port"  
# - Unix Direct: "unix:///path/to/socket.sock"