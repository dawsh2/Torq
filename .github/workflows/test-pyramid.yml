name: Testing Pyramid - Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run full test suite daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: debug

jobs:
  # Layer 1: Unit Tests (Fast, runs on every commit)
  unit-tests:
    name: "Layer 1: Unit Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check code formatting
      run: cargo fmt --all -- --check
    
    - name: Run Clippy
      run: cargo clippy --workspace -- -D warnings
    
    - name: Run unit tests
      run: |
        cargo test --workspace --lib --bins
        cargo test --package protocol_v2 --lib
    
    - name: Run unit tests with coverage
      run: |
        cargo install cargo-tarpaulin
        cargo tarpaulin --workspace --lib --bins --out xml --output-dir ./coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/cobertura.xml
        fail_ci_if_error: false

  # Layer 2: Integration Tests (Medium speed, component interaction)
  integration-tests:
    name: "Layer 2: Integration Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-tests
    
    services:
      # Mock services for integration testing
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Setup test environment
      run: |
        sudo mkdir -p /tmp/torq
        sudo chmod 777 /tmp/torq
    
    - name: Run integration tests
      run: |
        # Test relay communication
        cargo test --package protocol_v2 --test integration
        
        # Test component interaction
        cargo test integration --workspace
        
        # Test real data processing (with timeout)
        timeout 300 cargo test real_data_processing --workspace || true
    
    - name: Test relay performance
      run: |
        cargo test --release --package protocol_v2 relay_performance
    
    - name: Validate Protocol V2 compliance
      run: |
        cargo test --package protocol_v2 --test protocol_compliance
        cargo test --package protocol_v2 --test precision_validation

  # Layer 3: E2E Tests (Slower, full pipeline validation)
  e2e-tests:
    name: "Layer 3: E2E Golden Path Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: integration-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install Python (for dashboard testing)
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          ~/.cache/pip
        key: ${{ runner.os }}-e2e-${{ hashFiles('**/Cargo.lock', '**/requirements.txt') }}
    
    - name: Setup E2E test environment
      run: |
        # Create test directories
        sudo mkdir -p /tmp/torq /tmp/test_data
        sudo chmod -R 777 /tmp/torq /tmp/test_data
        
        # Install Python dependencies for dashboard
        pip install -r requirements.txt || echo "No requirements.txt found"
    
    - name: Run E2E Golden Path Tests
      run: |
        # The critical test that would catch "$150 hardcoded profit" bug
        cargo test --package torq-e2e-tests golden_path --release
        
        # Test with varying market conditions
        cargo test --package torq-e2e-tests varying_market_conditions --release
        
        # Test no-arbitrage scenarios
        cargo test --package torq-e2e-tests no_arbitrage_scenario --release
    
    - name: Validate arbitrage calculations
      run: |
        # Run property-based tests that would catch hardcoded values
        cargo test --package torq-e2e-tests hardcoded_value_detection --release
    
    - name: Archive E2E test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-results
        path: |
          /tmp/test_data/
          target/debug/deps/torq_e2e_tests-*
        retention-days: 7

  # Specialized: Property-Based Tests (Mathematical validation)
  property-tests:
    name: "Property-Based Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git  
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run property-based tests
      run: |
        # Arbitrage calculation properties
        cargo test --package torq-property-tests arbitrage_properties --release
        
        # Precision handling properties  
        cargo test --package torq-property-tests precision_properties --release
        
        # AMM math properties
        cargo test --package torq-property-tests amm_math_properties --release

  # Specialized: Fuzz Tests (Security and robustness)
  fuzz-tests:
    name: "Fuzz Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[fuzz]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
    
    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-fuzz-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run fuzz tests
      run: |
        # Fuzz TLV parser (critical for security)
        timeout 300 cargo fuzz run fuzz_tlv_parsing -- -max_total_time=300 || echo "Fuzz completed"
        
        # Fuzz header parsing
        timeout 180 cargo fuzz run fuzz_header_parsing -- -max_total_time=180 || echo "Fuzz completed"
        
        # Fuzz complete message parsing
        timeout 240 cargo fuzz run fuzz_complete_message -- -max_total_time=240 || echo "Fuzz completed"
    
    - name: Check for fuzz findings
      run: |
        if [ -d fuzz/artifacts ]; then
          echo "❌ Fuzz testing found crashes/bugs!"
          ls -la fuzz/artifacts/
          exit 1
        else
          echo "✅ No fuzz testing issues found"
        fi

  # Performance Regression Testing
  performance-tests:
    name: "Performance Validation" 
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-perf-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run performance benchmarks
      run: |
        # Critical path latency tests
        cargo test --release performance_hot_path
        
        # Protocol V2 throughput tests
        cargo test --release --package protocol_v2 throughput_validation
        
        # Message construction/parsing benchmarks
        cargo bench --package protocol_v2 -- message_construction
        cargo bench --package protocol_v2 -- message_parsing
    
    - name: Validate performance requirements
      run: |
        # These tests assert specific performance targets
        cargo test --release --package protocol_v2 performance_requirements
        
        # >1M msg/s construction, >1.6M msg/s parsing
        cargo run --release --bin test_protocol_performance

  # Test Summary and Reporting
  test-summary:
    name: "Test Summary"
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, property-tests, performance-tests]
    if: always()
    
    steps:
    - name: Generate test summary
      run: |
        echo "## 🧪 Testing Pyramid Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Layer 1: Unit Tests" >> $GITHUB_STEP_SUMMARY
        echo "Status: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Layer 2: Integration Tests" >> $GITHUB_STEP_SUMMARY  
        echo "Status: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Layer 3: E2E Tests" >> $GITHUB_STEP_SUMMARY
        echo "Status: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Property-Based Tests" >> $GITHUB_STEP_SUMMARY
        echo "Status: ${{ needs.property-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Performance Tests" >> $GITHUB_STEP_SUMMARY
        echo "Status: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.unit-tests.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" && 
              "${{ needs.e2e-tests.result }}" == "success" && 
              "${{ needs.property-tests.result }}" == "success" && 
              "${{ needs.performance-tests.result }}" == "success" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ All Test Layers Passed!" >> $GITHUB_STEP_SUMMARY
          echo "The testing pyramid is healthy and complete." >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ❌ Test Failures Detected" >> $GITHUB_STEP_SUMMARY
          echo "Review failed test layers before merging." >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Fail if critical tests failed
      if: needs.unit-tests.result != 'success' || needs.integration-tests.result != 'success' || needs.e2e-tests.result != 'success'
      run: |
        echo "Critical test layers failed. Blocking merge."
        exit 1